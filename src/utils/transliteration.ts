/* eslint-disable */
/* eslint-disable prettier/prettier */
const toLatCharsMap = {
    'а': 'a',
    'А': 'A',
    'б': 'b',
    'Б': 'B',
    'в': 'v',
    'В': 'V',
    'г': 'g',
    'Г': 'G',
    'д': 'd',
    'Д': 'D',
    'е': 'e',
    'Е': 'E',
    'ё': 'e',
    'Ё': 'E',
    'ж': 'zh',
    'Ж': 'Zh',
    'з': 'z',
    'З': 'Z',
    'и': 'i',
    'И': 'I',
    'й': 'i',
    'Й': 'I',
    'к': 'k',
    'К': 'K',
    'л': 'l',
    'Л': 'L',
    'м': 'm',
    'М': 'M',
    'н': 'n',
    'Н': 'N',
    'о': 'o',
    'О': 'O',
    'п': 'p',
    'П': 'P',
    'р': 'r',
    'Р': 'R',
    'с': 's',
    'С': 'S',
    'т': 't',
    'Т': 'T',
    'у': 'u',
    'У': 'U',
    'ф': 'f',
    'Ф': 'F',
    'х': 'kh',
    'Х': 'Kh',
    'ц': 'ts',
    'Ц': 'Ts',
    'ч': 'ch',
    'Ч': 'Ch',
    'ш': 'sh',
    'Ш': 'Sh',
    'щ': 'shch',
    'Щ': 'Shch',
    'ъ': 'ie',
    'Ъ': 'Ie',
    'ы': 'y',
    'Ы': 'Y',
    'ь': '',
    'Ь': '',
    'э': 'e',
    'Э': 'E',
    'ю': 'iu',
    'Ю': 'Iu',
    'я': 'ia',
    'Я': 'Ia'
} as { [name: string]: string };

const toCyrCharsMap = {
    'a': 'а',
    'A': 'А',
    'b': 'б',
    'B': 'Б',
    'v': 'в',
    'V': 'В',
    'w': 'в',
    'W': 'В',
    'g': 'г',
    'G': 'Г',
    'd': 'д',
    'D': 'Д',
    'e': 'е',
    'E': 'Е',
    'zh': 'ж',
    'Zh': 'Ж',
    'z': 'з',
    'Z': 'З',
    'i': 'и',
    'I': 'И',
    'j': 'й',
    'J': 'Й',
    'k': 'к',
    'K': 'К',
    'l': 'л',
    'L': 'Л',
    'm': 'м',
    'M': 'М',
    'n': 'н',
    'N': 'Н',
    'o': 'о',
    'O': 'О',
    'p': 'п',
    'P': 'П',
    'r': 'р',
    'R': 'Р',
    's': 'с',
    'S': 'С',
    't': 'т',
    'T': 'Т',
    'u': 'у',
    'U': 'У',
    'f': 'ф',
    'F': 'Ф',
    'kh': 'х',
    'Kh': 'Х',
    'c': 'ц',
    'C': 'Ц',
    'ch': 'ч',
    'Ch': 'Ч',
    'sh': 'ш',
    'Sh': 'Ш',
    'shh': 'щ',
    'Shh': 'Щ',
    '"': 'ъ',
    'y': 'ы',
    'Y': 'Ы',
    '\'': 'ь',
    'ju': 'ю',
    'Ju': 'Ю',
    'ja': 'я',
    'Ja': 'Я'
} as { [name: string]: string };

const toLatCharsKeyboardMap = {
    'Ф': 'A',
    'ф': 'a',
    'И': 'B',
    'и': 'b',
    'С': 'C',
    'с': 'c',
    'В': 'D',
    'в': 'd',
    'У': 'E',
    'у': 'e',
    'А': 'F',
    'а': 'f',
    'П': 'G',
    'п': 'g',
    'Р': 'H',
    'р': 'h',
    'Ш': 'I',
    'ш': 'i',
    'О': 'J',
    'о': 'j',
    'Л': 'K',
    'л': 'k',
    'Д': 'L',
    'д': 'l',
    'Ь': 'M',
    'ь': 'm',
    'Т': 'N',
    'т': 'n',
    'Щ': 'O',
    'щ': 'o',
    'З': 'P',
    'з': 'p',
    'Й': 'Q',
    'й': 'q',
    'К': 'R',
    'к': 'r',
    'Ы': 'S',
    'ы': 's',
    'Е': 'T',
    'е': 't',
    'Г': 'U',
    'г': 'u',
    'М': 'V',
    'м': 'v',
    'Ц': 'W',
    'ц': 'w',
    'Ч': 'X',
    'ч': 'x',
    'Н': 'Y',
    'н': 'y',
    'Я': 'Z',
    'я': 'z'
} as { [name: string]: string };

const toCyrCharsKeyboardMap = {
    'A': 'Ф',
    'a': 'ф',
    'B': 'И',
    'b': 'и',
    'C': 'С',
    'c': 'с',
    'D': 'В',
    'd': 'в',
    'E': 'У',
    'e': 'у',
    'F': 'А',
    'f': 'а',
    'G': 'П',
    'g': 'п',
    'H': 'Р',
    'h': 'р',
    'I': 'Ш',
    'i': 'ш',
    'J': 'О',
    'j': 'о',
    'K': 'Л',
    'k': 'л',
    'L': 'Д',
    'l': 'д',
    'M': 'Ь',
    'm': 'ь',
    'N': 'Т',
    'n': 'т',
    'O': 'Щ',
    'o': 'щ',
    'P': 'З',
    'p': 'з',
    'Q': 'Й',
    'q': 'й',
    'R': 'К',
    'r': 'к',
    'S': 'Ы',
    's': 'ы',
    'T': 'Е',
    't': 'е',
    'U': 'Г',
    'u': 'г',
    'V': 'М',
    'v': 'м',
    'W': 'Ц',
    'w': 'ц',
    'X': 'Ч',
    'x': 'ч',
    'Y': 'Н',
    'y': 'н',
    'Z': 'Я',
    'z': 'я',
    '~': 'Ё',
    '`': 'ё',
    '{': 'Х',
    '[': 'х',
    '}': 'Ъ',
    ']': 'ъ',
    ':': 'Ж',
    ';': 'ж',
    '\"': 'Э',
    '\'': 'э',
    '<': 'Б',
    ',': 'б',
    '>': 'Ю',
    '.': 'ю'
} as { [name: string]: string };

export function transliterateToLat(value: string): string {
    return value
        .split('')
        // SLT-1889 выкидываем из коллекции все символы кроме пробела и дефиса, так как они могут быть в русских именах
        .filter(ch => !!toLatCharsMap[ch] || /[\-\s]/g.test(ch))
        .map(ch => toLatCharsMap[ch] || ch)
        .join('');
}

export function transliterateToCyr(value: string): string {
    const pickLatCharsByLength = (charNum: number) => {
        return Object.getOwnPropertyNames(toCyrCharsMap).filter(chars => chars.length === charNum);
    };
    const replaceChar = (latChar: string) => {
        const cyrCh = toCyrCharsMap[latChar];
        if (cyrCh) {
            value = value.replace(new RegExp(latChar, 'g'), cyrCh);
        }
    };

    pickLatCharsByLength(3).forEach(replaceChar);
    pickLatCharsByLength(2).forEach(replaceChar);
    pickLatCharsByLength(1).forEach(replaceChar);

    return value;
}

export function replaceToLatKeyboardChar(value: string): string {
    return value.split('').map(ch => toLatCharsKeyboardMap[ch] || ch).join('');
}

export function replaceToCyrKeyboardChar(value: string): string {
    return value.split('').map(ch => toCyrCharsKeyboardMap[ch] || ch).join('');
}
